// Generated by gencpp from file car/miiboo.msg
// DO NOT EDIT!


#ifndef CAR_MESSAGE_MIIBOO_H
#define CAR_MESSAGE_MIIBOO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <car/imu.h>

namespace car
{
template <class ContainerAllocator>
struct miiboo_
{
  typedef miiboo_<ContainerAllocator> Type;

  miiboo_()
    : frame_id(0)
    , left_wheel_speed(0)
    , right_wheel_speed(0)
    , angle()  {
    }
  miiboo_(const ContainerAllocator& _alloc)
    : frame_id(0)
    , left_wheel_speed(0)
    , right_wheel_speed(0)
    , angle(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_id_type;
  _frame_id_type frame_id;

   typedef int16_t _left_wheel_speed_type;
  _left_wheel_speed_type left_wheel_speed;

   typedef int16_t _right_wheel_speed_type;
  _right_wheel_speed_type right_wheel_speed;

   typedef  ::car::imu_<ContainerAllocator>  _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::car::miiboo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car::miiboo_<ContainerAllocator> const> ConstPtr;

}; // struct miiboo_

typedef ::car::miiboo_<std::allocator<void> > miiboo;

typedef boost::shared_ptr< ::car::miiboo > miibooPtr;
typedef boost::shared_ptr< ::car::miiboo const> miibooConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car::miiboo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car::miiboo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car::miiboo_<ContainerAllocator1> & lhs, const ::car::miiboo_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.left_wheel_speed == rhs.left_wheel_speed &&
    lhs.right_wheel_speed == rhs.right_wheel_speed &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car::miiboo_<ContainerAllocator1> & lhs, const ::car::miiboo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car::miiboo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car::miiboo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::miiboo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::miiboo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::miiboo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::miiboo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car::miiboo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9222de228ec580804ecbcde4d74572f";
  }

  static const char* value(const ::car::miiboo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9222de228ec5808ULL;
  static const uint64_t static_value2 = 0x04ecbcde4d74572fULL;
};

template<class ContainerAllocator>
struct DataType< ::car::miiboo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car/miiboo";
  }

  static const char* value(const ::car::miiboo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car::miiboo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 frame_id\n"
"int16 left_wheel_speed\n"
"int16 right_wheel_speed\n"
"imu angle \n"
"================================================================================\n"
"MSG: car/imu\n"
"   float64 roll\n"
"    float64 pitch\n"
"    float64 yaw\n"
;
  }

  static const char* value(const ::car::miiboo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car::miiboo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.left_wheel_speed);
      stream.next(m.right_wheel_speed);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct miiboo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car::miiboo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car::miiboo_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_id);
    s << indent << "left_wheel_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_wheel_speed);
    s << indent << "right_wheel_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_wheel_speed);
    s << indent << "angle: ";
    s << std::endl;
    Printer< ::car::imu_<ContainerAllocator> >::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MESSAGE_MIIBOO_H
