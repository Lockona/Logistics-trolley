// Generated by gencpp from file car/odom.msg
// DO NOT EDIT!


#ifndef CAR_MESSAGE_ODOM_H
#define CAR_MESSAGE_ODOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car
{
template <class ContainerAllocator>
struct odom_
{
  typedef odom_<ContainerAllocator> Type;

  odom_()
    : position_x(0.0)
    , position_y(0.0)
    , oriention(0.0)
    , velocity_linear(0.0)
    , velocity_angular(0.0)  {
    }
  odom_(const ContainerAllocator& _alloc)
    : position_x(0.0)
    , position_y(0.0)
    , oriention(0.0)
    , velocity_linear(0.0)
    , velocity_angular(0.0)  {
  (void)_alloc;
    }



   typedef float _position_x_type;
  _position_x_type position_x;

   typedef float _position_y_type;
  _position_y_type position_y;

   typedef float _oriention_type;
  _oriention_type oriention;

   typedef float _velocity_linear_type;
  _velocity_linear_type velocity_linear;

   typedef float _velocity_angular_type;
  _velocity_angular_type velocity_angular;





  typedef boost::shared_ptr< ::car::odom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car::odom_<ContainerAllocator> const> ConstPtr;

}; // struct odom_

typedef ::car::odom_<std::allocator<void> > odom;

typedef boost::shared_ptr< ::car::odom > odomPtr;
typedef boost::shared_ptr< ::car::odom const> odomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car::odom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car::odom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car::odom_<ContainerAllocator1> & lhs, const ::car::odom_<ContainerAllocator2> & rhs)
{
  return lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y &&
    lhs.oriention == rhs.oriention &&
    lhs.velocity_linear == rhs.velocity_linear &&
    lhs.velocity_angular == rhs.velocity_angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car::odom_<ContainerAllocator1> & lhs, const ::car::odom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car::odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car::odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::odom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::odom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car::odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "188ac42e6aff59c7fe2517b8262a562c";
  }

  static const char* value(const ::car::odom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x188ac42e6aff59c7ULL;
  static const uint64_t static_value2 = 0xfe2517b8262a562cULL;
};

template<class ContainerAllocator>
struct DataType< ::car::odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car/odom";
  }

  static const char* value(const ::car::odom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car::odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 position_x\n"
"float32 position_y\n"
"float32 oriention\n"
"float32 velocity_linear\n"
"float32 velocity_angular\n"
;
  }

  static const char* value(const ::car::odom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car::odom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.oriention);
      stream.next(m.velocity_linear);
      stream.next(m.velocity_angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car::odom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car::odom_<ContainerAllocator>& v)
  {
    s << indent << "position_x: ";
    Printer<float>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<float>::stream(s, indent + "  ", v.position_y);
    s << indent << "oriention: ";
    Printer<float>::stream(s, indent + "  ", v.oriention);
    s << indent << "velocity_linear: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_linear);
    s << indent << "velocity_angular: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MESSAGE_ODOM_H
