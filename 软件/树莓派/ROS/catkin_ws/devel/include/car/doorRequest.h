// Generated by gencpp from file car/doorRequest.msg
// DO NOT EDIT!


#ifndef CAR_MESSAGE_DOORREQUEST_H
#define CAR_MESSAGE_DOORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car
{
template <class ContainerAllocator>
struct doorRequest_
{
  typedef doorRequest_<ContainerAllocator> Type;

  doorRequest_()
    : status(0)  {
    }
  doorRequest_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(open)
  #undef open
#endif
#if defined(_WIN32) && defined(close)
  #undef close
#endif

  enum {
    open = 1u,
    close = 0u,
  };


  typedef boost::shared_ptr< ::car::doorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car::doorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct doorRequest_

typedef ::car::doorRequest_<std::allocator<void> > doorRequest;

typedef boost::shared_ptr< ::car::doorRequest > doorRequestPtr;
typedef boost::shared_ptr< ::car::doorRequest const> doorRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car::doorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car::doorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car::doorRequest_<ContainerAllocator1> & lhs, const ::car::doorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car::doorRequest_<ContainerAllocator1> & lhs, const ::car::doorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::car::doorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car::doorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::doorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car::doorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::doorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car::doorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car::doorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "296e18f3193b649593f237b5801495e1";
  }

  static const char* value(const ::car::doorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x296e18f3193b6495ULL;
  static const uint64_t static_value2 = 0x93f237b5801495e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::car::doorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car/doorRequest";
  }

  static const char* value(const ::car::doorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car::doorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"uint8 open = 1\n"
"uint8 close = 0\n"
;
  }

  static const char* value(const ::car::doorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car::doorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct doorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car::doorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car::doorRequest_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_MESSAGE_DOORREQUEST_H
